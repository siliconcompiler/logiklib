# Copyright 2025 Zero ASIC Corporation
# Licensed under the Apache 2.0 License (see LICENSE for details)
# Auto-generated by FPGA Architect

from logiklib import register_part_data

from siliconcompiler import FPGA


####################################################
# Setup for z1060 FPGA
####################################################
def setup():

    part_name = 'z1060'

    fpga = FPGA(part_name, package='logik-fpga-z1060')

    register_part_data(fpga, part_name, f"logik-fpga-{part_name}")

    fpga.set('fpga', part_name, 'vendor', 'fpga_architect')

    fpga.set('fpga', part_name, 'var', 'vpr_device_code', 'z1060')

    fpga.set('fpga', part_name, 'lutsize', 6)
    fpga.add('fpga', part_name, 'var', 'feature_set', 'async_reset')
    fpga.add('fpga', part_name, 'var', 'feature_set', 'enable')
    fpga.add('fpga', part_name, 'var', 'vpr_clock_model', 'route')
    fpga.set('fpga', part_name, 'file', 'archfile', 'cad/z1060.xml')
    fpga.set('fpga', part_name, 'file', 'graphfile', 'cad/z1060_rr_graph.xml')
    fpga.set('fpga', part_name, 'file', 'yosys_fpga_config', 'cad/z1060_yosys_config.json')
    fpga.set('fpga', part_name, 'file', 'yosys_flop_techmap', 'cad/tech_flops.v')
    fpga.set('fpga', part_name, 'file', 'yosys_memory_techmap', 'cad/tech_bram.v')
    fpga.set('fpga', part_name, 'file', 'yosys_memory_libmap', 'cad/bram_memory_map.txt')
    fpga.set('fpga', part_name, 'file', 'yosys_dsp_techmap', 'cad/tech_dsp.v')
    fpga.set('fpga', part_name, 'file', 'yosys_extractlib', 'cad/tech_dsp_extract.v')
    fpga.set('fpga', part_name, 'file', 'yosys_macrolib', 'cad/tech_dsp_blackbox.v')

    # Define the macros that can be techmapped to based on the modes
    # that exist in the design
    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_registers',
                 ['dffe',
                  'dffeh',
                  'dffr',
                  'dffelr',
                  'dffh',
                  'dffehr',
                  'dfflr',
                  'dffer',
                  'dffhr',
                  'dffhlr',
                  'dffel',
                  'dff',
                  'dffhl',
                  'dffl',
                  'dffehlr',
                  'dffehl'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_dsps',
                 ['dsp_mult',
                  'efpga_mult_regi',
                  'efpga_mult_rego',
                  'efpga_adder_regio',
                  'efpga_macc_regi',
                  'efpga_macc_pipe_regi',
                  'efpga_adder_rego',
                  'efpga_mult_addc_regi',
                  'efpga_adder_regi',
                  'efpga_macc',
                  'efpga_acc_regi',
                  'efpga_acc',
                  'efpga_mult_addc_rego',
                  'efpga_mult_addc_regio',
                  'efpga_macc_pipe',
                  'efpga_mult',
                  'efpga_adder',
                  'efpga_mult_regio',
                  'efpga_mult_addc'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_brams',
                 ['sdpram_2048x8',
                  'sram_tdp',
                  'spram_512x32',
                  'tdpram_8192x2',
                  'tdpram_2048x8',
                  'tdpram_16384x1',
                  'tdpram_1024x16',
                  'sdpram_8192x2',
                  'spram_1024x16',
                  'tdpram_4096x4',
                  'spram_8192x2',
                  'sdpram_16384x1',
                  'sdpram_1024x16',
                  'spram_4096x4',
                  'spram_16384x1',
                  'sram_sp',
                  'spram_2048x8',
                  'sdpram_4096x4',
                  'sram_sdp'])

    # Set the dsp options for the yosys built-in DSP correctly for this
    # architecture
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_NAME=_dsp_block_')

    fpga.add('fpga', part_name, 'var', 'dsp_blackbox_options', 'BLACKBOX_MACROS')

    fpga.set('fpga', part_name, 'file', 'bitstream_map', 'cad/z1060_bitstream_map.json')

    fpga.set('fpga', part_name, 'file', 'constraints_map', 'cad/z1060_constraint_map.json')

    fpga.set('fpga', part_name, 'var', 'channelwidth', 100)

    # Add the liberty files to the fpga part.
    fpga.set('fpga', part_name, 'file', 'vtr_primitives_lib', 'vtr_primitives.lib')
    fpga.set('fpga', part_name, 'file', 'fpga_macros_libs', ['tech_flops.lib', 'tech_dsp.lib', 'tech_bram.lib'])

    return fpga


#########################
if __name__ == "__main__":
    fpga = setup()
    assert fpga.check_filepaths()
    fpga.write_manifest(f'{fpga.design}.json')

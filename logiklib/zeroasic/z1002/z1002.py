# Copyright 2025 Zero ASIC Corporation
# Licensed under the Apache 2.0 License (see LICENSE for details)
# Auto-generated by FPGA Architect

from logiklib import register_part_data

from siliconcompiler import FPGA


####################################################
# Setup for z1002 FPGA
####################################################
def setup():

    part_name = 'z1002'

    fpga = FPGA(part_name, package='logik-fpga-z1002')

    register_part_data(fpga, part_name, f"logik-fpga-{part_name}")

    fpga.set('fpga', part_name, 'vendor', 'fpga_architect')

    fpga.set('fpga', part_name, 'var', 'vpr_device_code', 'z1002')

    fpga.set('fpga', part_name, 'lutsize', 4)
    fpga.add('fpga', part_name, 'var', 'feature_set', 'async_reset')
    fpga.add('fpga', part_name, 'var', 'feature_set', 'enable')
    fpga.add('fpga', part_name, 'var', 'vpr_clock_model', 'route')
    fpga.set('fpga', part_name, 'file', 'archfile', 'cad/z1002.xml')
    fpga.set('fpga', part_name, 'file', 'graphfile', 'cad/z1002_rr_graph.xml')
    fpga.set('fpga', part_name, 'file', 'yosys_fpga_config', 'cad/z1002_yosys_config.json')
    fpga.set('fpga', part_name, 'file', 'yosys_flop_techmap', 'cad/tech_flops.v')

    # Define the macros that can be techmapped to based on the modes
    # that exist in the design
    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_registers', ['dffe', 'dffr', 'dffer', 'dff'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_dsps',
                 ['efpga_mult_addc',
                  'efpga_acc_regi',
                  'efpga_mult_addc_regi',
                  'efpga_adder_regio',
                  'dsp_mult',
                  'efpga_acc',
                  'efpga_adder_rego',
                  'efpga_macc_pipe_regi',
                  'efpga_mult_addc_rego',
                  'efpga_mult_addc_regio',
                  'efpga_mult',
                  'efpga_macc_regi',
                  'efpga_mult_regi',
                  'efpga_mult_rego',
                  'efpga_adder_regi',
                  'efpga_macc',
                  'efpga_macc_pipe',
                  'efpga_mult_regio',
                  'efpga_adder'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_brams',
                 ['sram_sdp',
                  'tdpram_256x4',
                  'sdpram_1024x1',
                  'sdpram_512x2',
                  'sram_sp',
                  'spram_64x16',
                  'tdpram_128x8',
                  'tdpram_512x2',
                  'spram_512x2',
                  'spram_128x8',
                  'sdpram_128x8',
                  'spram_256x4',
                  'sram_tdp',
                  'sdpram_256x4',
                  'tdpram_1024x1',
                  'spram_1024x1'])

    # Set the dsp options for the yosys built-in DSP correctly for this
    # architecture
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_NAME=_dsp_block_')

    fpga.add('fpga', part_name, 'var', 'dsp_blackbox_options', 'BLACKBOX_MACROS')

    fpga.set('fpga', part_name, 'file', 'bitstream_map', 'cad/z1002_bitstream_map.json')

    fpga.set('fpga', part_name, 'file', 'constraints_map', 'cad/z1002_constraint_map.json')

    fpga.set('fpga', part_name, 'var', 'channelwidth', 150)

    # Add the liberty files to the fpga part.
    fpga.set('fpga', part_name, 'file', 'vtr_primitives_lib', 'vtr_primitives.lib')
    fpga.set('fpga', part_name, 'file', 'fpga_macros_libs', ['tech_flops.lib'])

    return fpga


#########################
if __name__ == "__main__":
    fpga = setup()
    assert fpga.check_filepaths()
    fpga.write_manifest(f'{fpga.design}.json')
